/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GroupCall } from "./GroupCall";
import { GroupCallCountArgs } from "./GroupCallCountArgs";
import { GroupCallFindManyArgs } from "./GroupCallFindManyArgs";
import { GroupCallFindUniqueArgs } from "./GroupCallFindUniqueArgs";
import { CreateGroupCallArgs } from "./CreateGroupCallArgs";
import { UpdateGroupCallArgs } from "./UpdateGroupCallArgs";
import { DeleteGroupCallArgs } from "./DeleteGroupCallArgs";
import { Group } from "../../group/base/Group";
import { GroupCallService } from "../groupCall.service";
@graphql.Resolver(() => GroupCall)
export class GroupCallResolverBase {
  constructor(protected readonly service: GroupCallService) {}

  async _groupCallsMeta(
    @graphql.Args() args: GroupCallCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GroupCall])
  async groupCalls(
    @graphql.Args() args: GroupCallFindManyArgs
  ): Promise<GroupCall[]> {
    return this.service.groupCalls(args);
  }

  @graphql.Query(() => GroupCall, { nullable: true })
  async groupCall(
    @graphql.Args() args: GroupCallFindUniqueArgs
  ): Promise<GroupCall | null> {
    const result = await this.service.groupCall(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GroupCall)
  async createGroupCall(
    @graphql.Args() args: CreateGroupCallArgs
  ): Promise<GroupCall> {
    return await this.service.createGroupCall({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GroupCall)
  async updateGroupCall(
    @graphql.Args() args: UpdateGroupCallArgs
  ): Promise<GroupCall | null> {
    try {
      return await this.service.updateGroupCall({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GroupCall)
  async deleteGroupCall(
    @graphql.Args() args: DeleteGroupCallArgs
  ): Promise<GroupCall | null> {
    try {
      return await this.service.deleteGroupCall(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  async getGroup(@graphql.Parent() parent: GroupCall): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
