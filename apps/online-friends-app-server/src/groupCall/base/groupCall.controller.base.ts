/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupCallService } from "../groupCall.service";
import { GroupCallCreateInput } from "./GroupCallCreateInput";
import { GroupCall } from "./GroupCall";
import { GroupCallFindManyArgs } from "./GroupCallFindManyArgs";
import { GroupCallWhereUniqueInput } from "./GroupCallWhereUniqueInput";
import { GroupCallUpdateInput } from "./GroupCallUpdateInput";

export class GroupCallControllerBase {
  constructor(protected readonly service: GroupCallService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupCall })
  async createGroupCall(
    @common.Body() data: GroupCallCreateInput
  ): Promise<GroupCall> {
    return await this.service.createGroupCall({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        callStartedAt: true,
        callEndedAt: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupCall] })
  @ApiNestedQuery(GroupCallFindManyArgs)
  async groupCalls(@common.Req() request: Request): Promise<GroupCall[]> {
    const args = plainToClass(GroupCallFindManyArgs, request.query);
    return this.service.groupCalls({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        callStartedAt: true,
        callEndedAt: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupCall(
    @common.Param() params: GroupCallWhereUniqueInput
  ): Promise<GroupCall | null> {
    const result = await this.service.groupCall({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        callStartedAt: true,
        callEndedAt: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupCall(
    @common.Param() params: GroupCallWhereUniqueInput,
    @common.Body() data: GroupCallUpdateInput
  ): Promise<GroupCall | null> {
    try {
      return await this.service.updateGroupCall({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          callStartedAt: true,
          callEndedAt: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupCall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupCall(
    @common.Param() params: GroupCallWhereUniqueInput
  ): Promise<GroupCall | null> {
    try {
      return await this.service.deleteGroupCall({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          callStartedAt: true,
          callEndedAt: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
