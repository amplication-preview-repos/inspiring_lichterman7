/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupService } from "../group.service";
import { GroupCreateInput } from "./GroupCreateInput";
import { Group } from "./Group";
import { GroupFindManyArgs } from "./GroupFindManyArgs";
import { GroupWhereUniqueInput } from "./GroupWhereUniqueInput";
import { GroupUpdateInput } from "./GroupUpdateInput";
import { GroupMemberFindManyArgs } from "../../groupMember/base/GroupMemberFindManyArgs";
import { GroupMember } from "../../groupMember/base/GroupMember";
import { GroupMemberWhereUniqueInput } from "../../groupMember/base/GroupMemberWhereUniqueInput";
import { GroupChatFindManyArgs } from "../../groupChat/base/GroupChatFindManyArgs";
import { GroupChat } from "../../groupChat/base/GroupChat";
import { GroupChatWhereUniqueInput } from "../../groupChat/base/GroupChatWhereUniqueInput";
import { GroupCallFindManyArgs } from "../../groupCall/base/GroupCallFindManyArgs";
import { GroupCall } from "../../groupCall/base/GroupCall";
import { GroupCallWhereUniqueInput } from "../../groupCall/base/GroupCallWhereUniqueInput";

export class GroupControllerBase {
  constructor(protected readonly service: GroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Group })
  async createGroup(@common.Body() data: GroupCreateInput): Promise<Group> {
    return await this.service.createGroup({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        createdBy: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Group] })
  @ApiNestedQuery(GroupFindManyArgs)
  async groups(@common.Req() request: Request): Promise<Group[]> {
    const args = plainToClass(GroupFindManyArgs, request.query);
    return this.service.groups({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        createdBy: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async group(
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<Group | null> {
    const result = await this.service.group({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        createdBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroup(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() data: GroupUpdateInput
  ): Promise<Group | null> {
    try {
      return await this.service.updateGroup({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          createdBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroup(
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<Group | null> {
    try {
      return await this.service.deleteGroup({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          createdBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/groupMembers")
  @ApiNestedQuery(GroupMemberFindManyArgs)
  async findGroupMembers(
    @common.Req() request: Request,
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<GroupMember[]> {
    const query = plainToClass(GroupMemberFindManyArgs, request.query);
    const results = await this.service.findGroupMembers(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        group: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groupMembers")
  async connectGroupMembers(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        connect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groupMembers")
  async updateGroupMembers(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        set: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groupMembers")
  async disconnectGroupMembers(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupMembers: {
        disconnect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/groupChats")
  @ApiNestedQuery(GroupChatFindManyArgs)
  async findGroupChats(
    @common.Req() request: Request,
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<GroupChat[]> {
    const query = plainToClass(GroupChatFindManyArgs, request.query);
    const results = await this.service.findGroupChats(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        message: true,
        timestamp: true,
        sender: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groupChats")
  async connectGroupChats(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupChats: {
        connect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groupChats")
  async updateGroupChats(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupChats: {
        set: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groupChats")
  async disconnectGroupChats(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupChatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupChats: {
        disconnect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/groupCalls")
  @ApiNestedQuery(GroupCallFindManyArgs)
  async findGroupCalls(
    @common.Req() request: Request,
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<GroupCall[]> {
    const query = plainToClass(GroupCallFindManyArgs, request.query);
    const results = await this.service.findGroupCalls(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        callStartedAt: true,
        callEndedAt: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groupCalls")
  async connectGroupCalls(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupCallWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupCalls: {
        connect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groupCalls")
  async updateGroupCalls(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupCallWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupCalls: {
        set: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groupCalls")
  async disconnectGroupCalls(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: GroupCallWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupCalls: {
        disconnect: body,
      },
    };
    await this.service.updateGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
