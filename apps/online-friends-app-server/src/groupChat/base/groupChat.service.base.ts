/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GroupChat as PrismaGroupChat,
  Group as PrismaGroup,
} from "@prisma/client";

export class GroupChatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GroupChatCountArgs, "select">
  ): Promise<number> {
    return this.prisma.groupChat.count(args);
  }

  async groupChats(
    args: Prisma.GroupChatFindManyArgs
  ): Promise<PrismaGroupChat[]> {
    return this.prisma.groupChat.findMany(args);
  }
  async groupChat(
    args: Prisma.GroupChatFindUniqueArgs
  ): Promise<PrismaGroupChat | null> {
    return this.prisma.groupChat.findUnique(args);
  }
  async createGroupChat(
    args: Prisma.GroupChatCreateArgs
  ): Promise<PrismaGroupChat> {
    return this.prisma.groupChat.create(args);
  }
  async updateGroupChat(
    args: Prisma.GroupChatUpdateArgs
  ): Promise<PrismaGroupChat> {
    return this.prisma.groupChat.update(args);
  }
  async deleteGroupChat(
    args: Prisma.GroupChatDeleteArgs
  ): Promise<PrismaGroupChat> {
    return this.prisma.groupChat.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.groupChat
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }
}
