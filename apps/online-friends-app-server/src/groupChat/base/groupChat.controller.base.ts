/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupChatService } from "../groupChat.service";
import { GroupChatCreateInput } from "./GroupChatCreateInput";
import { GroupChat } from "./GroupChat";
import { GroupChatFindManyArgs } from "./GroupChatFindManyArgs";
import { GroupChatWhereUniqueInput } from "./GroupChatWhereUniqueInput";
import { GroupChatUpdateInput } from "./GroupChatUpdateInput";

export class GroupChatControllerBase {
  constructor(protected readonly service: GroupChatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupChat })
  async createGroupChat(
    @common.Body() data: GroupChatCreateInput
  ): Promise<GroupChat> {
    return await this.service.createGroupChat({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        message: true,
        timestamp: true,
        sender: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupChat] })
  @ApiNestedQuery(GroupChatFindManyArgs)
  async groupChats(@common.Req() request: Request): Promise<GroupChat[]> {
    const args = plainToClass(GroupChatFindManyArgs, request.query);
    return this.service.groupChats({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        message: true,
        timestamp: true,
        sender: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupChat(
    @common.Param() params: GroupChatWhereUniqueInput
  ): Promise<GroupChat | null> {
    const result = await this.service.groupChat({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        message: true,
        timestamp: true,
        sender: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupChat(
    @common.Param() params: GroupChatWhereUniqueInput,
    @common.Body() data: GroupChatUpdateInput
  ): Promise<GroupChat | null> {
    try {
      return await this.service.updateGroupChat({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          message: true,
          timestamp: true,
          sender: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupChat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupChat(
    @common.Param() params: GroupChatWhereUniqueInput
  ): Promise<GroupChat | null> {
    try {
      return await this.service.deleteGroupChat({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          message: true,
          timestamp: true,
          sender: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
