/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupMemberService } from "../groupMember.service";
import { GroupMemberCreateInput } from "./GroupMemberCreateInput";
import { GroupMember } from "./GroupMember";
import { GroupMemberFindManyArgs } from "./GroupMemberFindManyArgs";
import { GroupMemberWhereUniqueInput } from "./GroupMemberWhereUniqueInput";
import { GroupMemberUpdateInput } from "./GroupMemberUpdateInput";

export class GroupMemberControllerBase {
  constructor(protected readonly service: GroupMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GroupMember })
  async createGroupMember(
    @common.Body() data: GroupMemberCreateInput
  ): Promise<GroupMember> {
    return await this.service.createGroupMember({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        group: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GroupMember] })
  @ApiNestedQuery(GroupMemberFindManyArgs)
  async groupMembers(@common.Req() request: Request): Promise<GroupMember[]> {
    const args = plainToClass(GroupMemberFindManyArgs, request.query);
    return this.service.groupMembers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        group: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async groupMember(
    @common.Param() params: GroupMemberWhereUniqueInput
  ): Promise<GroupMember | null> {
    const result = await this.service.groupMember({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        group: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGroupMember(
    @common.Param() params: GroupMemberWhereUniqueInput,
    @common.Body() data: GroupMemberUpdateInput
  ): Promise<GroupMember | null> {
    try {
      return await this.service.updateGroupMember({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          group: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGroupMember(
    @common.Param() params: GroupMemberWhereUniqueInput
  ): Promise<GroupMember | null> {
    try {
      return await this.service.deleteGroupMember({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          group: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
