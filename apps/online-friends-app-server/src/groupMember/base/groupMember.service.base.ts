/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GroupMember as PrismaGroupMember,
  Group as PrismaGroup,
  User as PrismaUser,
} from "@prisma/client";

export class GroupMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GroupMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.groupMember.count(args);
  }

  async groupMembers(
    args: Prisma.GroupMemberFindManyArgs
  ): Promise<PrismaGroupMember[]> {
    return this.prisma.groupMember.findMany(args);
  }
  async groupMember(
    args: Prisma.GroupMemberFindUniqueArgs
  ): Promise<PrismaGroupMember | null> {
    return this.prisma.groupMember.findUnique(args);
  }
  async createGroupMember(
    args: Prisma.GroupMemberCreateArgs
  ): Promise<PrismaGroupMember> {
    return this.prisma.groupMember.create(args);
  }
  async updateGroupMember(
    args: Prisma.GroupMemberUpdateArgs
  ): Promise<PrismaGroupMember> {
    return this.prisma.groupMember.update(args);
  }
  async deleteGroupMember(
    args: Prisma.GroupMemberDeleteArgs
  ): Promise<PrismaGroupMember> {
    return this.prisma.groupMember.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.groupMember
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.groupMember
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
