datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   String?
  timestamp DateTime?
  sender    String?
  receiver  String?
}

model Friend {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  friends   Friend[] @relation(name: "FriendOnFriends")
  friend    Friend?  @relation(name: "FriendOnFriends", fields: [friendId], references: [id])
  friendId  String?
}

model VideoCall {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  callStartedAt DateTime?
  callEndedAt   DateTime?
  caller        String?
  receiver      String?
}

model GroupCall {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  callStartedAt DateTime?
  callEndedAt   DateTime?
  group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?
}

model Group {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String?
  description  String?
  createdBy    String?
  groupMembers GroupMember[]
  groupChats   GroupChat[]
  groupCalls   GroupCall[]
}

model GroupChat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   String?
  timestamp DateTime?
  sender    String?
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   String?
}

model GroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  firstName      String?
  lastName       String?
  username       String        @unique
  email          String?       @unique
  password       String
  roles          Json
  profilePicture Json?
  friends        Friend[]
  groupMembers   GroupMember[]
}
